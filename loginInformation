#!/usr/bin/env bash
#Created by Halil Yavuz Çevik (25/07/2018)
# 64 bit Ubuntu output example
# [7] [00613] [:0  ] [user      ] [tty7        ] [:0                  ] [0.0.0.0        ] [2018-07-26T17:34:49,586825+0000]

echo -e "ATTENTION! This script is written for CentOS 6 platforms. Script collects login informations from:\n\n/var/log/wtmp\n/var/run/btmp\n/var/log/utmp\n\nPlease check if these files exist and check your permissions before you go any further.\n\n"
dayNum=$(date +"%d")
dayStr=$(date +"%a")
month=$(date +"%b")
year=$(date +"%Y")

echo -e "Current Date : $dayStr $month &dayNum &year"
echo -e "Choose Language:\n 1 - Turkish\n 2 - English"
read language
echo
echo "Your Choice: $language"
#Language Options
case "$language" in
	1)
		echo -e "Gösterilecek oturum açma bilgileri için zaman aralığı belirleyiniz:\n 1 - Günlük\n 2 - Aylık"
		SCRIPT_DIR=$(pwd)
		touch $SCRIPT_DIR/tmp.txt
		chmod 755 $SCRIPT_DIR/tmp.txt
		HOSTNAME=$(uname -a | cut -d " " -f 2)
		LOGIN_COUNTER=1
		read period
		echo
		echo "Seçiminiz: $period"
		echo
		echo "BİLGİLER TOPLANIYOR. LÜTFEN BEKLEYİNİZ"
		echo
		#Sadece listedeki seçeneklerin seçilebilmesi için case yapısı kullanılacaktır.
		case "$period" in
	
			1)
				echo "$HOSTNAME Makinesine Şu An Grafik Arayüz Üzerinden Bağlı Kullanıcılar " >> tmp.txt
				echo "===============================================" >> tmp.txt
				#Grafik arayüz ekranı üzernden şu an bağlı biri var mı kontrolü için /var/run/utmp dizininden veri toplanıyor.
				stdbuf -oL utmpdump /var/run/utmp | grep "$year" | grep "$dayStr $month $dayNum" |
				while IFS= read -r line
				do
					IN="$line"
					arrINCLI=(${IN//[/[})
					#Boşluk olan satırları düzenleme amacıyla IFS kullanılıyor.
					IFS=']'; arrINCLI=($IN); unset IFS;
					if [ "${arrINCLI[0]}" = "[7" ];
						then
						#Boşluklar ve '[' karakterleri çıkarılacaktır.
						iflocal="$(echo -e "${arrINCLI[5]}" | sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' -e 's/^\[//')"
						iftty="$(echo -e "${arrINCLI[4]}" | sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' -e 's/^\[//')"
						#Grafik arayüz üzerinden bağlantılar harici çıktılar göz ardı ediliyor.
							if [ "$iflocal" = ":0" ] && [[ $iftty =~ [tty.] ]]
								then 
								echo "Grafik Arayüz Aktif" >> tmp.txt
								echo "${arrINCLI[3]}] ${arrINCLI[7]}]" >> tmp.txt
								echo "-----------------------------------------------" >> tmp.txt
							fi
					fi
				done
			
				echo >> tmp.txt
				echo >> tmp.txt
			
				echo "$HOSTNAME Makinesine Grafik Arayüz Üzerinden Bağlı Kullanıcılar " >> tmp.txt
				echo "===============================================" >> tmp.txt
				stdbuf -oL utmpdump /var/log/wtmp | grep "$year" | grep "$dayStr $month $dayNum" |
					while IFS= read -r line
					do
						IN="$line"
						arrIN=(${IN//[/[})
						#Boşluk olan satırları düzenleme amacıyla IFS kullanılıyor.
						IFS=']'; arrIN=($IN); unset IFS;
						#ut_type (Normal Süreç) çıktıları toplanıyor
						if [ "${arrIN[0]}" = "[7" ];
							then
							#Boşluklar ve '[' karakterleri çıkarılacaktır.
							iflocal="$(echo -e "${arrIN[5]}" | sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' -e 's/^\[//')"
							iftty="$(echo -e "${arrIN[4]}" | sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' -e 's/^\[//')"
							#Grafik arayüz üzerinden bağlantılar harici çıktılar göz ardı ediliyor.
							if [ "$iflocal" = ":0" ] && [[ $iftty =~ [tty.] ]]
								then 
								echo "Grafik Arayüz Oturum $LOGIN_COUNTER" >> tmp.txt
								echo "${arrIN[3]}] ${arrIN[7]}]" >> tmp.txt
								echo "-----------------------------------------------" >> tmp.txt
								LOGIN_COUNTER=$(($LOGIN_COUNTER +1))
							fi
						fi
					done
							
	 	 	;;
  			2)
				echo "$HOSTNAME Makinesine Şu An Grafik Arayüz Üzerinden Bağlı Kullanıcılar " >> tmp.txt
				echo "===============================================" >> tmp.txt
				#Grafik arayüz ekranı üzernden şu an bağlı biri var mı kontrolü için /var/run/utmp dizininden veri toplanıyor.
				stdbuf -oL utmpdump /var/run/utmp | grep "$year" | grep "$month" |
				while IFS= read -r line
				do
					IN="$line"
					arrINCLI=(${IN//[/[})
					#Boşluk olan satırları düzenleme amacıyla IFS kullanılıyor.
					IFS=']'; arrINCLI=($IN); unset IFS;
					if [ "${arrINCLI[0]}" = "[7" ];
						then
						#Boşluklar ve '[' karakterleri çıkarılacaktır.
						iflocal="$(echo -e "${arrINCLI[5]}" | sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' -e 's/^\[//')"
						iftty="$(echo -e "${arrINCLI[4]}" | sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' -e 's/^\[//')"
						#Grafik arayüz üzerinden bağlantılar harici çıktılar göz ardı ediliyor.
							if [ "$iflocal" = ":0" ] && [[ $iftty =~ [tty.] ]]
								then 
								echo "Grafik Arayüz Aktif" >> tmp.txt
								echo "${arrINCLI[3]}] ${arrINCLI[7]}]" >> tmp.txt
								echo "-----------------------------------------------" >> tmp.txt
							fi
					fi
				done
			
				echo >> tmp.txt
				echo >> tmp.txt
			
				echo "$HOSTNAME Makinesine Grafik Arayüz Üzerinden Bağlı Kullanıcılar " >> tmp.txt
				echo "===============================================" >> tmp.txt
				stdbuf -oL utmpdump /var/log/wtmp | grep "$year" | grep "$month" |
					while IFS= read -r line
					do
						IN="$line"
						arrIN=(${IN//[/[})
						#Boşluk olan satırları düzenleme amacıyla IFS kullanılıyor.
						IFS=']'; arrIN=($IN); unset IFS;
						#ut_type (Normal Süreç) çıktıları toplanıyor
						if [ "${arrIN[0]}" = "[7" ];
							then
							#Boşluklar ve '[' karakterleri çıkarılacaktır.
							iflocal="$(echo -e "${arrIN[5]}" | sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' -e 's/^\[//')"
							iftty="$(echo -e "${arrIN[4]}" | sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' -e 's/^\[//')"
							#Grafik arayüz üzerinden bağlantılar harici çıktılar göz ardı ediliyor.
							if [ "$iflocal" = ":0" ] && [[ $iftty =~ [tty.] ]]
								then 
								echo "Grafik Arayüz Oturum $LOGIN_COUNTER" >> tmp.txt
								echo "${arrIN[3]}] ${arrIN[7]}]" >> tmp.txt
								echo "-----------------------------------------------" >> tmp.txt
								LOGIN_COUNTER=$(($LOGIN_COUNTER +1))
							fi
						fi
					done
							
	 	 	;;
  
			3)
  
			;;
  
  			*)
  			  esco "Lütfen Listeden Bir Sayı Seçiniz"
			esac
	;;

	2)
		echo -e "Choose a period for login informations:\n 1 - Daily\n 2 - Monthly"
		SCRIPT_DIR=$(pwd)
		touch $SCRIPT_DIR/tmp.txt
		chmod 755 $SCRIPT_DIR/tmp.txt
		HOSTNAME=$(uname -a | cut -d " " -f 2)
		LOGIN_COUNTER=1
		read period
		echo
		echo "Your Choice: $period"
		echo
		echo "COLLECTING LOGS. PLEASE WAIT"
		echo
		#Using case construct to eliminate inputs other than 1,2 or 3
		case "$period" in
	
			1)
				echo "$HOSTNAME Users Currently Active" >> tmp.txt
				echo "===============================================" >> tmp.txt
				#Collecting data from /var/run/utmp for checking if anyone is currently active
				stdbuf -oL utmpdump /var/run/utmp | grep "$year" | grep "$dayStr $month $dayNum" |
				while IFS= read -r line
				do
					IN="$line"
					arrINCLI=(${IN//[/[})
					#Lines have whitespaces so we need to use IFS here
					IFS=']'; arrINCLI=($IN); unset IFS;
					if [ "${arrINCLI[0]}" = "[7" ];
						then
						#Excluding whitespaces and '[' character
						iflocal="$(echo -e "${arrINCLI[5]}" | sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' -e 's/^\[//')"
						iftty="$(echo -e "${arrINCLI[4]}" | sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' -e 's/^\[//')"
						#Excluding outputs except physical GUI logins
							if [ "$iflocal" = ":0" ] && [[ $iftty =~ [tty.] ]]
								then 
								echo "GUI Active" >> tmp.txt
								echo "${arrINCLI[3]}] ${arrINCLI[7]}]" >> tmp.txt
								echo "-----------------------------------------------" >> tmp.txt
							fi
					fi
				done
			
				echo >> tmp.txt
				echo >> tmp.txt
			
				echo "$HOSTNAME Users Logged in Using GUI" >> tmp.txt
				echo "===============================================" >> tmp.txt
				stdbuf -oL utmpdump /var/log/wtmp | grep "$year" | grep "$dayStr $month $dayNum" |
					while IFS= read -r line
					do
						IN="$line"
						arrIN=(${IN//[/[})
						#Lines have whitespaces so we need to use IFS here
						IFS=']'; arrIN=($IN); unset IFS;
						#Collecting output of ut_type (Normal Processes)
						if [ "${arrIN[0]}" = "[7" ];
							then
							#Excluding whitespaces and '[' character
							iflocal="$(echo -e "${arrIN[5]}" | sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' -e 's/^\[//')"
							iftty="$(echo -e "${arrIN[4]}" | sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' -e 's/^\[//')"
							#Excluding outputs except physical GUI logins
							if [ "$iflocal" = ":0" ] && [[ $iftty =~ [tty.] ]]
								then 
								echo "GUI Login $LOGIN_COUNTER" >> tmp.txt
								echo "${arrIN[3]}] ${arrIN[7]}]" >> tmp.txt
								echo "-----------------------------------------------" >> tmp.txt
								LOGIN_COUNTER=$(($LOGIN_COUNTER +1))
							fi
						fi
					done
							
	 	 	;;
  			2)
  				echo "$HOSTNAME Users Currently Active" >> tmp.txt
				echo "===============================================" >> tmp.txt
				#Collecting data from /var/run/utmp for checking if anyone is currently active
				stdbuf -oL utmpdump /var/run/utmp | grep "$year" | grep "$month" |
				while IFS= read -r line
				do
					IN="$line"
					arrINCLI=(${IN//[/[})
					#Lines have whitespaces so we need to use IFS here
					IFS=']'; arrINCLI=($IN); unset IFS;
					if [ "${arrINCLI[0]}" = "[7" ];
						then
						#Excluding whitespaces and '[' character
						iflocal="$(echo -e "${arrINCLI[5]}" | sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' -e 's/^\[//')"
						iftty="$(echo -e "${arrINCLI[4]}" | sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' -e 's/^\[//')"
						#Excluding outputs except physical GUI logins
							if [ "$iflocal" = ":0" ] && [[ $iftty =~ [tty.] ]]
								then 
								echo "GUI Active" >> tmp.txt
								echo "${arrINCLI[3]}] ${arrINCLI[7]}]" >> tmp.txt
								echo "-----------------------------------------------" >> tmp.txt
							fi
					fi
				done
		
				echo >> tmp.txt
				echo >> tmp.txt
		
				echo "$HOSTNAME Users Logged in Using GUI" >> tmp.txt
				echo "===============================================" >> tmp.txt
				stdbuf -oL utmpdump /var/log/wtmp | grep "$year" | grep "$month" |
				while IFS= read -r line
				do
					IN="$line"
					arrIN=(${IN//[/[})
					#Lines have whitespaces so we need to use IFS here
					IFS=']'; arrIN=($IN); unset IFS;
					#Collecting output of ut_type (Normal Processes)
					if [ "${arrIN[0]}" = "[7" ];
						then
						#Excluding whitespaces and '[' character
						iflocal="$(echo -e "${arrIN[5]}" | sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' -e 's/^\[//')"
						iftty="$(echo -e "${arrIN[4]}" | sed -e 's/[[:space:]]*$//' -e 's/^[[:space:]]*//' -e 's/^\[//')"
						#Excluding outputs except physical GUI logins
						if [ "$iflocal" = ":0" ] && [[ $iftty =~ [tty.] ]]
							then 
							echo "GUI Login $LOGIN_COUNTER" >> tmp.txt
							echo "${arrIN[3]}] ${arrIN[7]}]" >> tmp.txt
							echo "-----------------------------------------------" >> tmp.txt
							LOGIN_COUNTER=$(($LOGIN_COUNTER +1))
						fi
					fi
				done
				
			;;
  
			3)
  
			;;
  
  			*)
  			  esco "Please enter a number from list"
			esac
	;;
	*)
		esco "Please enter a number from list"
	esac

vi tmp.txt
rm $SCRIPT_DIR/tmp.txt
